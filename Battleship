package battleship;

import java.util.*;

public class Main {
    static Scanner scanner = new Scanner(System.in);

    public static void main(String[] args) {
        int turn = 0;

        Player player1 = new Player("Player 1");
        Player player2 = new Player("Player 2");

        System.out.println(player1.getPlayerName() + ", place your ships to the game field\n");
        player1.setUpShips();
        passMoveMessage();
        System.out.println(player2.getPlayerName() + ", place your ships to the game field\n");
        player2.setUpShips();
        passMoveMessage();

        System.out.println("The game starts!");

        boolean running = true;
        while (running) {

            if (turn == 0) {

                System.out.println(player1.getPlayerName() + ", it's your turn!\n");
                player2.getBoard().printField(true, false);
                System.out.println("----------------------");
                player1.getBoard().printField(false, false);


                if (player1.processInput(scanner.nextLine())) {
                    player2.getBoard().makeShot(player1.getShotY(), player1.getShotX());
                } else {
                    System.out.println("Bad input");
                    continue;
                }
            } else {
                System.out.println("\n" + player2.getPlayerName() + ", it's your turn!\n");
                player1.getBoard().printField(true, false);
                System.out.println("---------------------");
                player2.getBoard().printField(false, false);


                if (player2.processInput(scanner.nextLine())) {
                    player1.getBoard().makeShot(player2.getShotY(), player2.getShotX());
                } else {
                    System.out.println("Bad input");
                    continue;
                }

            }

            running = player1.getBoard().checkWin() || player2.getBoard().checkWin() ? false : true;

            if (running){
                passMoveMessage();
            }

            turn = turn == 0 ? 1 : 0;

        }

        System.out.println("You sunk the last ship. You won. Congratulations!");

    }

    public static void passMoveMessage() {
        System.out.println("Press Enter and pass the move to another player");
        scanner.nextLine();
        System.out.println("...");
    }
}

package battleship;

import java.util.Arrays;
import java.util.List;
import java.util.Locale;
import java.util.Scanner;

public class Player {
    protected int fromX;
    protected int fromY;
    protected int toX;
    protected int toY ;
    protected int shotX;
    protected int shotY;
    private String playerName;
    private GameField board;

    public Player(String playerName) {
        this.playerName=playerName;
        board = new GameField();
    }

    public String getPlayerName() {
        return playerName;
    }

    public GameField getBoard() {
        return board;
    }

    public static void printShipRequest(int a) {
        System.out.printf("\nEnter the coordinates of the %s (%d cells):\n", ShipType.values()[a].getShipName(),
                ShipType.values()[a].getSize());
    }

    public boolean processInput(String input) {

        List<String> letters = Arrays.asList("A", "B",
                "C", "D", "E", "F", "G", "H", "I", "J");

        if (input.contains(" ")) {
            String[] coordinates = input.split(" ");
            String fromCoord = coordinates[0];
            String toCoord = coordinates[1];

            fromY = letters.indexOf(String.valueOf(fromCoord.charAt(0)).toUpperCase(Locale.ROOT));
            fromX = Integer.parseInt(fromCoord.substring(1)) - 1;
            toY = letters.indexOf(String.valueOf(toCoord.charAt(0)).toUpperCase(Locale.ROOT));
            toX = Integer.parseInt(toCoord.substring(1)) - 1;
        } else {
            shotY = letters.indexOf(String.valueOf(input.charAt(0)).toUpperCase(Locale.ROOT));
            shotX = Integer.parseInt(input.substring(1)) - 1;

            if ((shotY < 0 || shotY > 9) || (shotX < 0 || shotX > 9)) {
                shotY = 0;
                shotX = 0;
                return false;
            }
        }
        return true;
    }

    public  void setUpShips() {
        board.printField(false, false);
        for (int i = 0; i < 1; i++) {
            printShipRequest(i);
            Scanner scanner = new Scanner(System.in);
            String input = scanner.nextLine();
            processInput(input);
            board.shipsCollection.add(new Ship(ShipType.values()[i], fromY, fromX, toY, toX));
            String placeShipResponse = board.placeShip(board.shipsCollection.get(i));

            if (placeShipResponse.equals("OK")) {
                board.printField(false, false);
            } else {
                board.shipsCollection.remove(board.shipsCollection.size() - 1);
                System.out.println(placeShipResponse);
                i--;
            }
        }

    }

    public int getShotY() {
        return shotY;
    }

    public int getShotX() {
        return shotX;
    }
}
package battleship;

import java.util.ArrayList;

public class GameField  {

    ArrayList<Ship> shipsCollection = new ArrayList<>();

    private Cell[][] cellsArray = new Cell[10][10];

    public GameField() {
        initializeField();
    }

    public void setShipOnGrid(Ship ship) {
        for (Cell cell : ship.getCellsBelongingToShip()) {
            cell.setShip(ship);
        }
    }

    public void initializeField() {
        for (int i = 0; i < cellsArray.length; i++) {
            for (int j = 0; j < cellsArray[i].length; j++) {
                cellsArray[i][j] = new Cell(i, j);

            }
        }
    }

    public void printField(boolean fogOfWar, boolean empty) {
        //System.out.println();
        System.out.println("  1 2 3 4 5 6 7 8 9 10");
        char yLetter = 65;
        for (int i = 0; i < cellsArray.length; i++) {
            System.out.print(yLetter + " ");
            for (int j = 0; j < cellsArray[i].length; j++) {
                if (!cellsArray[i][j].isHit && !cellsArray[i][j].isContainsShip() || (fogOfWar && !cellsArray[i][j].isHit()) || empty) {
                    System.out.print("~ ");
                } else if (cellsArray[i][j].isContainsShip() && !cellsArray[i][j].isHit() && !fogOfWar) {
                    System.out.print("O ");
                } else if (cellsArray[i][j].isHit() && cellsArray[i][j].isContainsShip()) {
                    System.out.print("X ");
                } else if (cellsArray[i][j].isHit() && !cellsArray[i][j].isContainsShip()) {
                    System.out.print("M ");
                }
            }
            System.out.println();
            yLetter++;
        }
    }

    public boolean checkCollision(Ship ship) {

        ArrayList<Cell> cells = ship.getCellsBelongingToShip();

        for (Cell cell : cells) {
            if (cell.getY() > 0) {
                for (int k = -1; k < 2; k++) {
                    if (cell.getX() + k > 9 || cell.getX() + k < 0) continue;
                    if (cellsArray[cell.getY() - 1][cell.getX() + k].isContainsShip()) {
                        return false;
                    }
                }
            }

            for (int k = -1; k < 2; k++) {
                if (cell.getX() + k > 9 || cell.getX() + k < 0) continue;
                if (cellsArray[cell.getY()][cell.getX() + k].isContainsShip()) {
                    return false;
                }
            }

            if (cell.getY() < 9) {
                for (int k = -1; k < 2; k++) {
                    if (cell.getX() + k > 9 || cell.getX() + k < 0) continue;
                    if (cellsArray[cell.getY() + 1][cell.getX() + k].isContainsShip()) {
                        return false;
                    }
                }
            }
        }

        return true;
    }

    public String placeShip(Ship ship) {

        boolean validOrientation = ship.checkOrientation();
        ship.setCellsBelongingToThisShip(cellsArray);
        boolean validSize = ship.checkSize();
        boolean noCollision = checkCollision(ship);

        if (validOrientation && validSize && noCollision) {
            setShipOnGrid(ship);
        } else {
            if (!validOrientation) {
                return "Error! Wrong ship location! Try again:";
            } else if (!validSize) {
                StringBuilder wrongSizeMessage = new StringBuilder("Error! Wrong length of the ! Try again");
                wrongSizeMessage.insert(27, ship.shipType.getShipName());
                return wrongSizeMessage.toString();
            } else if (!noCollision) {
                return "Error! You placed it too close to another one. Try again:";
            }
        }

        return "OK";
    }

    public boolean checkWin() {
        for (Ship ship : shipsCollection) {
            if (!ship.checkIfSunk()) {
                return false;
            }
        }
        return true;
    }

    public void makeShot(int y, int x) {
        cellsArray[y][x].setHit(true);
        String message="";

        if (cellsArray[y][x].isContainsShip()){
            if (cellsArray[y][x].getShip().checkIfSunk()){
                message="You sank a ship! Specify a new target: ";
            } else {
                message="You hit a ship! Try again:";
            }
        } else {
            message="You missed!";
        }

        printField(true, false);
        System.out.println(message+"\n");
    }

}
package battleship;


import java.util.ArrayList;

enum ShipType {
    AIRCARRIER(5, "Aircraft Carrier"),
    BATTLESHIP(4, "Battleship"),
    SUBMARINE(3, "Submarine"),
    CRUISER(3, "Cruiser"),
    DESTROYER(2, "Destroyer");

    private int size;
    private String shipName;

    ShipType(int size, String shipName) {
        this.size = size;
        this.shipName = shipName;
    }

    public String getShipName() {
        return shipName;
    }

    public int getSize() {
        return size;
    }
}

enum Orientation {VERTICAL, HORIZONTAL}

public class Ship {

    protected ShipType shipType;
    boolean isSunk;
    private Orientation orientation;
    private Coordinates coordinates;
    private ArrayList<Cell> cellsBelongingToShip = new ArrayList<>();

    public Ship(ShipType ship, int fromY, int fromX, int toY, int toX) {
        this.shipType = ship;
        setCoordinates(fromY, fromX, toY, toX);
        checkOrientation();

    }


    public Orientation getOrientation() {
        return orientation;
    }

    public void setOrientation(Orientation orientation) {
        this.orientation = orientation;
    }

    public int getSize() {
        return shipType.getSize();
    }

    public void setCoordinates(int fromY, int fromX, int toY, int toX) {
        this.coordinates = new Coordinates(fromY, fromX, toY, toX);
    }


    public boolean checkOrientation() {
        if (coordinates.fromY == coordinates.toY && coordinates.fromX != coordinates.toX) {
            this.setOrientation(Orientation.HORIZONTAL);
        } else if (coordinates.fromY != coordinates.toY && coordinates.fromX == coordinates.toX) {
            this.setOrientation(Orientation.VERTICAL);
        } else {
            return false;
        }
        return true;
    }

    public boolean checkSize() {
        return getCellsBelongingToShip().size() == getSize() ? true : false;
    }

    public void setCellsBelongingToThisShip(Cell[][] cellsArray) {
        int from = 0;
        int to = 0;
        int anchor = 0;

        if (this.getOrientation() == Orientation.HORIZONTAL) {
            from = coordinates.fromX < coordinates.toX ?
                    coordinates.fromX : coordinates.toX;
            to = coordinates.toX > coordinates.fromX ?
                    coordinates.toX : coordinates.fromX;
            anchor = coordinates.fromY;

        } else if (this.getOrientation() == Orientation.VERTICAL) {
            from = coordinates.fromY < coordinates.toY ?
                    coordinates.fromY : coordinates.toY;
            to = coordinates.toY > coordinates.fromY ?
                    coordinates.toY : coordinates.fromY;
            anchor = coordinates.fromX;
        }

        for (int i = from; i <= to; i++) {
            if (this.getOrientation() == Orientation.HORIZONTAL) {
                this.cellsBelongingToShip.add(cellsArray[anchor][i]);
            } else {
                this.cellsBelongingToShip.add(cellsArray[i][anchor]);
            }
        }

    }

    public boolean checkIfSunk() {

        for (Cell cell : cellsBelongingToShip) {
            if (!cell.isHit()) {
                return false;
            }
        }

        this.isSunk=true;
        return true;
    }

    public ArrayList<Cell> getCellsBelongingToShip() {
        return cellsBelongingToShip;
    }


    class Coordinates {

        protected int fromX;
        protected int fromY;
        protected int toX;
        protected int toY;

        public Coordinates(int fromY, int fromX, int toY, int toX) {

            this.fromX = fromX;
            this.fromY = fromY;
            this.toX = toX;
            this.toY = toY;

        }
    }

}
